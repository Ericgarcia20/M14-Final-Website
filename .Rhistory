# Load libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
# Load data
data <- read.csv("product_advertising_data.csv")
# Load data
data <- read.csv("Advertising_Data.csv")
# Correlation Heatmap
corr_matrix <- cor(data)
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Scatter Plots
data_long <- data %>%
pivot_longer(cols = -Sales, names_to = "Channel", values_to = "Spend")
# Scatter Plots
data_long <- data %>%
pivot_longer(cols = -Product_Sold, names_to = "Channel", values_to = "Spend")
ggplot(data_long, aes(x = Spend, y = Sales)) +
geom_point(alpha = 0.6) +
facet_wrap(~ Channel, scales = "free") +
theme_minimal() +
labs(title = "Advertising Spend vs. Sales", x = "Advertising Spend", y = "Sales")
# Scatter Plots
data_long <- data %>%
pivot_longer(cols = -Product_Sold, names_to = "Channel", values_to = "Spend")
# Correlation Heatmap
corr_matrix <- cor(data)
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Scatter Plots
data_long <- data %>%
pivot_longer(cols = -Product_Sold, names_to = "Channel", values_to = "Spend")
ggplot(data_long, aes(x = Spend, y = Product_Sold)) +
geom_point(alpha = 0.6, color = "#0073C2FF") +
facet_wrap(~ Channel, scales = "free") +
theme_minimal() +
labs(title = "Advertising Spend vs. Product Sold", x = "Advertising Spend", y = "Product Sold")
# Multiple Linear Regression
model <- lm(Product_Sold ~ ., data = data)
data$Predicted_Sales <- predict(model, data)
ggplot(data, aes(x = Product_Sold, y = Predicted_Sales)) +
geom_point(color = "#EFC000FF", alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Actual vs. Predicted Product Sales", x = "Actual Sales", y = "Predicted Sales")
# Load data
data <- read.csv("Advertising_Data.csv")
---
title: "Tuning a kNearest Neighbor Model"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Libraries and Loading Data
```{r}
library(tidymodels)
library(rio)
library(janitor)
library(kknn)
DataWine=import("https://ai.lange-analytics.com/data/WineData.rds") |>
clean_names("upper_camel") |>
rename(Sulfur=TotalSulfurDioxide) |>
mutate(WineColor=as.factor(WineColor))
print(Recipe)
Recipe=recipe(WineColor~., data=DataTrain) |>
step_rm(Quality) |>
step_normalize(all_predictors())
library(tidymodels)
library(rio)
library(janitor)
library(kknn)
DataWine=import("https://ai.lange-analytics.com/data/WineData.rds") |>
clean_names("upper_camel") |>
rename(Sulfur=TotalSulfurDioxide) |>
mutate(WineColor=as.factor(WineColor))
set.seed(876)
Split7030=initial_split(DataWine, prop=0.7, strata=WineColor)
DataTrain=training(Split7030)
DataTest=testing(Split7030)
head(DataTrain)
Recipe=recipe(WineColor~., data=DataTrain) |>
step_rm(Quality) |>
step_normalize(all_predictors())
print(Recipe)
ModelDesign=nearest_neighbor(neighbors=tune()) |>
set_engine("kknn") |>
set_mode("classification")
print(ModelDesign)
TuneWFModel=workflow() |>
add_recipe(Recipe) |>
add_model(ModelDesign)
print(TuneWFModel)
ParGrid=data.frame(neighbors=c(1:15))
print(ParGrid)
FoldsForTuning=vfold_cv(DataTrain, v=5,
strata=WineColor)
print(FoldsForTuning)
library(rio)
library(janitor)
library(tidymodels)
library(SmartEDA)
Titanic=import("C:/Users/bigem/OneDrive/Documents/1. MSDM - College/2. IBM 6540 Lange/Titanic.csv") |>
clean_names("upper_camel")
Titanic=import("C:/Users/bigem/OneDrive/Documents/1. MSDM - College/2. IBM 6540 Lange Done/Project Group Work/Titanic.csv") |>
clean_names("upper_camel")
Titanic=import("C:\Users\bigem\OneDrive\Documents\1. MSDM - College\IBM 6540 Lange Done\Project Group Work/Titanic.csv") |>
Titanic=import("C:/Users/bigem/OneDrive/Documents/1. MSDM - College/2. IBM 6540 Lange Done/Project Group Work/Titanic.csv") |>
clean_names("upper_camel")
Titanic=import("C:\Users\bigem\OneDrive\Documents\1. MSDM - College\IBM 6540 Lange Done\Project Group Work\Titanic.csv") |>
Titanic=import("C:/Users/bigem/OneDrive/Documents/1. MSDM - College/IBM 6540 Lange Done/Project Group Work/Titanic.csv") |>
clean_names("upper_camel")
head(Titanic)
library(tidymodels)
library(tidyverse)
library(googlesheets4)
library(rio)
library(janitor)
SleepHealth <- import("C:/Users/bigem/OneDrive/Documents/1. MSDM - College/IBM 6510 Done/Project 12-4-2023/Sleep_health_and_lifestyle_dataset.csv") |>
clean_names("upper_camel")  # This will make your column names neat and camel-case
head(SleepHealth)
library(ggdag)
dagify(SleepQuality~Stress+Exercise+HeartRate+BMI,
BMI~Exercise) |>
ggdag(node_size = 22) + theme_dag_gray_grid()
library(wooldridge)
SexType <- c(Male = 0, Female = 1)
SleepHealthAllData$Sex <- SexType[SleepHealthAllData$Gender]
SleepHealth$Sex <- SexType[SleepHealthAllData$Gender]
SleepHealth$Sex <- SexType[SleepHealth$Gender]
SleepHealth = SleepHealth |>
mutate(`BMI.Category` = ifelse(`BMI.Category` == "Normal Weight", "Normal", `BMI.Category`))
# Changing Gender (chr variable) to numeric variable. Male = 0, female = 1
colnames(SleepHealth)
SleepHealth = SleepHealth |>
mutate(`BmiCategory` = ifelse(`BmiCategory` == "Normal Weight", "Normal", `BmiCategory`))
BMIType <-c(Normal = 0, Overweight = 1, Obese = 2)
BMIType <-c(Normal = 0, Overweight = 1, Obese = 2)
SleepHealth$BMI <- BMIType[SleepHealth$`BmiCategory`]
SleepHealthData=SleepHealth |>
select(SleepQuality=`Quality.of.Sleep`, Stress=`Stress.Level`, Exercise=`Physical.Activity.Level`, HeartRate=`Heart.Rate`, Age, SleepDuration=`Sleep.Duration`, DailySteps=`Daily.Steps`, Sex, BMI) |>
clean_names("upper_camel")
SleepHealthData <- SleepHealth |>
select(
SleepQuality = QualityOfSleep,
Stress = StressLevel,
Exercise = PhysicalActivityLevel,
HeartRate,
Age,
SleepDuration,
DailySteps,
Sex,
BMI = BmiCategory
) |>
clean_names("upper_camel")
library(SmartEDA)
ExpReport(SleepHealthData, op_file = "EDAReport")
library(corrplot)
CorMatrix=cor(SleepHealthData)
corrplot(CorMatrix)
# Filter numeric columns only
numeric_vars <- SleepHealthData |>
dplyr::select(where(is.numeric))
CorMatrix <- cor(numeric_vars, use = "complete.obs")
corrplot(CorMatrix)
SleepData <- SleepHealthData |>
select(SleepQuality, Stress, Exercise, HeartRate, BMI)
SleepHealthData <- SleepHealth |>
select(
SleepQuality = QualityOfSleep,
Stress = StressLevel,
Exercise = PhysicalActivityLevel,
HeartRate,
Age,
SleepDuration,
DailySteps,
Sex,
BMI = BmiCategory
) |>
clean_names("upper_camel")
SleepData <- SleepHealthData |>
select(SleepQuality, Stress, Exercise, HeartRate, BMI)
SleepData <- SleepHealthData |>
select(SleepQuality, Stress, Exercise, HeartRate, BmiCategory)
SleepData <- SleepHealthData |>
select(SleepQuality, Stress, Exercise, HeartRate, Bmi)
SleepData <- SleepHealthData |>
select(SleepQuality, Stress, Exercise, HeartRate, Bmi)
file <- "path/to/resume.qmd"
lines <- readLines(file, warn = TRUE)
file <- "C:/Users/bigem/OneDrive/Documents/1. MSDM - College/1. IBM 6800 Jae Jung/M14/M14/resume/resume.qmd"
lines <- readLines(file, warn = TRUE)
file <- "C:/Users/bigem/OneDrive/Documents/1. MSDM - College/1. IBM 6800 Jae Jung/M14/M14/resume"
> lines <- readLines(file, warn = TRUE)
file <- "C:/Users/bigem/OneDrive/Documents/1. MSDM - College/1. IBM 6800 Jae Jung/M14/M14/resume"
lines <- readLines(file, warn = TRUE)
rmarkdown::render("resume/Resume.Rmd")
setwd("~/1. MSDM - College/1. IBM 6800 Jae Jung/M14/M14")
